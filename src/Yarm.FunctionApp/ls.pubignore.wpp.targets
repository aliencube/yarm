<?xml version="1.0" encoding="utf-8"?>
<!-- 
  This file can be imported into a WAP to support ignoreing files to be publish
  via a publish.ignore file.
  -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <ls-ExcludeFilesByPublishIgnoreDependsOn>
      $(ls-ExcludeFilesByPublishIgnoreDependsOn);
      ls-FindPubIgnoreFiles;
      ls-core-ExcludeFilesByPublishIgnore;
    </ls-ExcludeFilesByPublishIgnoreDependsOn>
  </PropertyGroup>

  <Target Name="ls-ExcludeFilesByPublishIgnore" DependsOnTargets="$(ls-ExcludeFilesByPublishIgnoreDependsOn)" />

  <Target Name="ls-FindPubIgnoreFiles">
    <!-- For now let's just read the root folder, later we can support publish.ignore files is other folders -->
    <ItemGroup>
      <PubIgnoreFiles Include="$(MSBuildProjectDirectory)\publish.ignore" Condition=" Exists('$(MSBuildProjectDirectory)\publish.ignore') "/>
    </ItemGroup>
  </Target>

  <!--
  This target will be executed once per publish.ignore file
  -->
  <PropertyGroup>
    <ls-core-ExcludeFilesByPublishIgnoreDependsOn>
      $(ls-core-ExcludeFilesByPublishIgnore);
      ls-FindPubIgnoreFiles;
    </ls-core-ExcludeFilesByPublishIgnoreDependsOn>
  </PropertyGroup>

  <Target Name="ls-core-ExcludeFilesByPublishIgnore"
          Outputs="%(PubIgnoreFiles.Identity)"
          DependsOnTargets="$(ls-core-ExcludeFilesByPublishIgnoreDependsOn)"
          BeforeTargets="ExcludeFilesFromPackage">
    <!-- Read the file and add the patterns to the ExcludeFromPackageFiles item -->

    <!-- 
    TODO: when supporting more than just the .publishIngore in the root we will
          need to prefix the lines from the file with the relative path.
    -->
    <ReadPublishIgnoreFile FilePath="%(PubIgnoreFiles.Identity)" Condition=" '%(PubIgnoreFiles.Identity)' !='' ">
      <Output TaskParameter="LinesFromFile" ItemName="_ls-PubIgnore-LinesRead"/>
    </ReadPublishIgnoreFile>

    <!-- Populate the ExcludeFromPackageFiles item -->
    <Message Text="Adding the following patterns to ExcludeFromPackageFiles: [@(_ls-PubIgnore-LinesRead->'%(Identity)')]" />

    <ItemGroup>
      <ExcludeFromPackageFiles Include="%(_ls-PubIgnore-LinesRead.Identity)">
        <FromTarget>ls-PublishIgnore</FromTarget>
      </ExcludeFromPackageFiles>
    </ItemGroup>

    <Message Text="ExcludeFromPackageFiles: [@(ExcludeFromPackageFiles)]" Importance="low"/>
  </Target>

  <!-- Tasks defined below -->
  <PropertyGroup>
    <ls-DefineReadPublishIgnoreFileInline Condition =" '$(ls-DefineReadPublishIgnoreFileInline)' == '' ">true</ls-DefineReadPublishIgnoreFileInline>
  </PropertyGroup>
  
  <PropertyGroup Condition=" '$(ls-msbuildtasks-path)'=='' ">
    <ls-msbuildtasks-path>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(windir)\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
  </PropertyGroup>
  
  <UsingTask TaskName="ReadPublishIgnoreFile"
             TaskFactory="CodeTaskFactory"
             Condition=" '$(ls-DefineReadPublishIgnoreFileInline)'=='true' "
             AssemblyFile="$(ls-msbuildtasks-path)">
    <ParameterGroup>
      <FilePath ParameterType="System.String" Required="true"/>

      <!-- Outputs -->
      <LinesFromFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            // read the file line by line and exclude any lines which start with # or 
            //  just contain whitespace
            Log.LogMessage("Starting to read publish.ignore file at [{0}]", this.FilePath);

            if (!File.Exists(FilePath)) {
                string msg = string.Format("Unable to find the publish.ignore file at [{0}]",this.FilePath);
                Log.LogError(msg);
                return false;
            }

            // TODO: do this better
            string[] allLinesRaw = File.ReadAllLines(this.FilePath);

            // System.Collections.Generic.List<ITaskItem> linesNotComments = new System.Collections.Generic.List<ITaskItem>();
            System.Collections.Generic.List<string> linesNotComments = new System.Collections.Generic.List<string>();
            foreach(string line in allLinesRaw){
                if (string.IsNullOrEmpty(line))
                    continue;

                // trim the line and see if it starts with #
                string pattern = line;

                if (pattern.StartsWith("#"))
                    continue;

                #region ConvertPatternIfNecessary - if this was defiend in an assembly this would be it's own method
                if (!string.IsNullOrEmpty(pattern)) {
                    pattern = pattern.Trim();
                    if (pattern.StartsWith("!"))
                    {
                        throw new NotSupportedException("The ! operator is not currently supported in publish.ignore");
                    }

                    // for patterns that match file and that do not start with \ or / we should prepend **\
                    if (!(pattern.EndsWith(@"\") || pattern.EndsWith(@"/"))) {
                        if (!(pattern.StartsWith(@"\") || pattern.StartsWith(@"/"))) {
                            pattern = string.Format(@"**\{0}",pattern);
                        }
                    }

                    // for file patterns that start with \ or / we should 
                    //  remove the leading slash because MSBuild assumes that
                    //  don't match \\servername\file.name
                    string fileThatStartsWithASlashPattern = @"^[\\,/]{1}[^\\,/].*\.[^/]*";
                    if (System.Text.RegularExpressions.Regex.IsMatch(pattern, fileThatStartsWithASlashPattern)) {
                        // \sample.txt or \folder\sub\somefile.txt
                        pattern = pattern.Substring(1);
                    }

                    // if its a directory we should append **\* to the end
                    if (pattern.EndsWith(@"/") || pattern.EndsWith(@"\"))
                    {
                        pattern = string.Format(@"{0}**\*", pattern);
                    }
                }
                #endregion
                
                // add it to the list to be returned
                // linesNotComments.Add(new TaskItem(pattern));
                linesNotComments.Add(pattern);
            }

            // doesn't work from an inline task for some reason
            // this.LinesFromFile = linesNotComments.ToArray();

            this.LinesFromFile = new ITaskItem[linesNotComments.Count];
            //this.LinesFromFile = new string [linesNotComments.Count];
            for (int i = 0; i < linesNotComments.Count; i++) {
                this.LinesFromFile[i] = new TaskItem(linesNotComments[i]);
            }

            Log.LogMessage("Finished reading publish.ignore file at [{0}]. Found [{0}] lines which are not comments or blank.", this.FilePath, this.LinesFromFile.Length);

            return !Log.HasLoggedErrors;
            ]]>
      </Code>
    </Task>
  </UsingTask>


  <!-- 
  The section below is only needed for debugging.
  If un-commented it will take precedence over the inline task above.
  You should also set ls-DefineReadPublishIgnoreFileInline=false from the cmd line.
  -->
  <!--<PropertyGroup>
    <ls-PublishIgnoreTaskPath Condition=" '$(ls-PublishIgnoreTaskPath)'=='' ">$(MSBuildProjectDirectory)\PubIgnore.Tasks.dll</ls-PublishIgnoreTaskPath>
  </PropertyGroup>
  
  <UsingTask TaskName ="ReadPublishIgnoreFile" AssemblyFile="$(ls-PublishIgnoreTaskPath)" />-->

</Project>
